// Generated by gencpp from file amrl_msgs/ErrorReport.msg
// DO NOT EDIT!


#ifndef AMRL_MSGS_MESSAGE_ERRORREPORT_H
#define AMRL_MSGS_MESSAGE_ERRORREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Header.h>

namespace amrl_msgs
{
template <class ContainerAllocator>
struct ErrorReport_
{
  typedef ErrorReport_<ContainerAllocator> Type;

  ErrorReport_()
    : header()
    , laser_header()
    , severity_level(0)
    , failed_subsystem(0)
    , detailed_error_msg()  {
    }
  ErrorReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , laser_header(_alloc)
    , severity_level(0)
    , failed_subsystem(0)
    , detailed_error_msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _laser_header_type;
  _laser_header_type laser_header;

   typedef uint8_t _severity_level_type;
  _severity_level_type severity_level;

   typedef uint8_t _failed_subsystem_type;
  _failed_subsystem_type failed_subsystem;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _detailed_error_msg_type;
  _detailed_error_msg_type detailed_error_msg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INFO)
  #undef INFO
#endif
#if defined(_WIN32) && defined(SUBOPTIMAL)
  #undef SUBOPTIMAL
#endif
#if defined(_WIN32) && defined(RISKY)
  #undef RISKY
#endif
#if defined(_WIN32) && defined(CATASTROPHIC)
  #undef CATASTROPHIC
#endif
#if defined(_WIN32) && defined(OTHER)
  #undef OTHER
#endif
#if defined(_WIN32) && defined(LOCALIZATION)
  #undef LOCALIZATION
#endif
#if defined(_WIN32) && defined(NAVIGATION_PERCEPTION)
  #undef NAVIGATION_PERCEPTION
#endif
#if defined(_WIN32) && defined(NAVIGATION_LOCAL_PLANNING)
  #undef NAVIGATION_LOCAL_PLANNING
#endif
#if defined(_WIN32) && defined(NAVIGATION_GLOBAL_PLANNING)
  #undef NAVIGATION_GLOBAL_PLANNING
#endif

  enum {
    INFO = 0u,
    SUBOPTIMAL = 1u,
    RISKY = 2u,
    CATASTROPHIC = 3u,
    OTHER = 0u,
    LOCALIZATION = 1u,
    NAVIGATION_PERCEPTION = 2u,
    NAVIGATION_LOCAL_PLANNING = 3u,
    NAVIGATION_GLOBAL_PLANNING = 4u,
  };


  typedef boost::shared_ptr< ::amrl_msgs::ErrorReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::ErrorReport_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorReport_

typedef ::amrl_msgs::ErrorReport_<std::allocator<void> > ErrorReport;

typedef boost::shared_ptr< ::amrl_msgs::ErrorReport > ErrorReportPtr;
typedef boost::shared_ptr< ::amrl_msgs::ErrorReport const> ErrorReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amrl_msgs::ErrorReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amrl_msgs::ErrorReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amrl_msgs::ErrorReport_<ContainerAllocator1> & lhs, const ::amrl_msgs::ErrorReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.laser_header == rhs.laser_header &&
    lhs.severity_level == rhs.severity_level &&
    lhs.failed_subsystem == rhs.failed_subsystem &&
    lhs.detailed_error_msg == rhs.detailed_error_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amrl_msgs::ErrorReport_<ContainerAllocator1> & lhs, const ::amrl_msgs::ErrorReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amrl_msgs::ErrorReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amrl_msgs::ErrorReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amrl_msgs::ErrorReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9898087bf4de62612995185ab9cc18ca";
  }

  static const char* value(const ::amrl_msgs::ErrorReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9898087bf4de6261ULL;
  static const uint64_t static_value2 = 0x2995185ab9cc18caULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amrl_msgs/ErrorReport";
  }

  static const char* value(const ::amrl_msgs::ErrorReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Header from the laser scan that was received closest to the creation of this report\n"
"std_msgs/Header laser_header\n"
"\n"
"# Severity level enum\n"
"uint8 INFO=0 # Information\n"
"uint8 SUBOPTIMAL=1 # Suboptimal but safe performance\n"
"uint8 RISKY=2 # risky, potentially unsafe (got away with it, but could have been catastrophic)\n"
"uint8 CATASTROPHIC=3 # catastrohpic (e.g. hit an obstacle)\n"
"\n"
"# Subsystem enum\n"
"uint8 OTHER=0 # for forward compatibility -- details can be added to the free-text field or a new type can be added if we find there is demand\n"
"uint8 LOCALIZATION=1 # robot is mislocalized\n"
"uint8 NAVIGATION_PERCEPTION=2 # perception failure, e.g. it mis-classified grass as traversible\n"
"uint8 NAVIGATION_LOCAL_PLANNING=3 # problems with local planning\n"
"uint8 NAVIGATION_GLOBAL_PLANNING=4 # problems with global planning\n"
"\n"
"# Should be one of the above severity levels\n"
"uint8 severity_level\n"
"\n"
"# Should be one of the above subsystems\n"
"uint8 failed_subsystem\n"
"\n"
"# Detailed text providing details about the error\n"
"string detailed_error_msg\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::amrl_msgs::ErrorReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.laser_header);
      stream.next(m.severity_level);
      stream.next(m.failed_subsystem);
      stream.next(m.detailed_error_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amrl_msgs::ErrorReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "laser_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.laser_header);
    s << indent << "severity_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.severity_level);
    s << indent << "failed_subsystem: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failed_subsystem);
    s << indent << "detailed_error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.detailed_error_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ERRORREPORT_H
