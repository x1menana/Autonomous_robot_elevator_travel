// Generated by gencpp from file amrl_msgs/ElevatorStatus.msg
// DO NOT EDIT!


#ifndef AMRL_MSGS_MESSAGE_ELEVATORSTATUS_H
#define AMRL_MSGS_MESSAGE_ELEVATORSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace amrl_msgs
{
template <class ContainerAllocator>
struct ElevatorStatus_
{
  typedef ElevatorStatus_<ContainerAllocator> Type;

  ElevatorStatus_()
    : floor(0)
    , door(0)  {
    }
  ElevatorStatus_(const ContainerAllocator& _alloc)
    : floor(0)
    , door(0)  {
  (void)_alloc;
    }



   typedef uint8_t _floor_type;
  _floor_type floor;

   typedef uint8_t _door_type;
  _door_type door;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DOOR_OPEN)
  #undef DOOR_OPEN
#endif
#if defined(_WIN32) && defined(DOOR_CLOSED)
  #undef DOOR_CLOSED
#endif
#if defined(_WIN32) && defined(DOOR_TRANSITION)
  #undef DOOR_TRANSITION
#endif
#if defined(_WIN32) && defined(FLOOR_TRANSITION)
  #undef FLOOR_TRANSITION
#endif

  enum {
    DOOR_OPEN = 1u,
    DOOR_CLOSED = 0u,
    DOOR_TRANSITION = 2u,
    FLOOR_TRANSITION = 0u,
  };


  typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ElevatorStatus_

typedef ::amrl_msgs::ElevatorStatus_<std::allocator<void> > ElevatorStatus;

typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus > ElevatorStatusPtr;
typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus const> ElevatorStatusConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amrl_msgs::ElevatorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amrl_msgs::ElevatorStatus_<ContainerAllocator1> & lhs, const ::amrl_msgs::ElevatorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.floor == rhs.floor &&
    lhs.door == rhs.door;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amrl_msgs::ElevatorStatus_<ContainerAllocator1> & lhs, const ::amrl_msgs::ElevatorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83d512d38050c144daa8ed0de80ab702";
  }

  static const char* value(const ::amrl_msgs::ElevatorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83d512d38050c144ULL;
  static const uint64_t static_value2 = 0xdaa8ed0de80ab702ULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amrl_msgs/ElevatorStatus";
  }

  static const char* value(const ::amrl_msgs::ElevatorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# define enum for door states\n"
"uint8 DOOR_OPEN=1\n"
"uint8 DOOR_CLOSED=0\n"
"uint8 DOOR_TRANSITION=2\n"
"\n"
"# define enum for floor states\n"
"uint8 FLOOR_TRANSITION=0\n"
"\n"
"uint8 floor\n"
"uint8 door\n"
;
  }

  static const char* value(const ::amrl_msgs::ElevatorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.floor);
      stream.next(m.door);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevatorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amrl_msgs::ElevatorStatus_<ContainerAllocator>& v)
  {
    s << indent << "floor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.floor);
    s << indent << "door: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ELEVATORSTATUS_H
