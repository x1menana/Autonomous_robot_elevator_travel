// Generated by gencpp from file amrl_msgs/BBox2DMsg.msg
// DO NOT EDIT!


#ifndef AMRL_MSGS_MESSAGE_BBOX2DMSG_H
#define AMRL_MSGS_MESSAGE_BBOX2DMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace amrl_msgs
{
template <class ContainerAllocator>
struct BBox2DMsg_
{
  typedef BBox2DMsg_<ContainerAllocator> Type;

  BBox2DMsg_()
    : label()
    , conf(0.0)
    , xyxy()  {
    }
  BBox2DMsg_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , conf(0.0)
    , xyxy(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef float _conf_type;
  _conf_type conf;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _xyxy_type;
  _xyxy_type xyxy;





  typedef boost::shared_ptr< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> const> ConstPtr;

}; // struct BBox2DMsg_

typedef ::amrl_msgs::BBox2DMsg_<std::allocator<void> > BBox2DMsg;

typedef boost::shared_ptr< ::amrl_msgs::BBox2DMsg > BBox2DMsgPtr;
typedef boost::shared_ptr< ::amrl_msgs::BBox2DMsg const> BBox2DMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amrl_msgs::BBox2DMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amrl_msgs::BBox2DMsg_<ContainerAllocator1> & lhs, const ::amrl_msgs::BBox2DMsg_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.conf == rhs.conf &&
    lhs.xyxy == rhs.xyxy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amrl_msgs::BBox2DMsg_<ContainerAllocator1> & lhs, const ::amrl_msgs::BBox2DMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbb7616239f6fc1fd905147604c7b5a7";
  }

  static const char* value(const ::amrl_msgs::BBox2DMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbb7616239f6fc1fULL;
  static const uint64_t static_value2 = 0xd905147604c7b5a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amrl_msgs/BBox2DMsg";
  }

  static const char* value(const ::amrl_msgs::BBox2DMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"float32 conf\n"
"float32[] xyxy\n"
;
  }

  static const char* value(const ::amrl_msgs::BBox2DMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.conf);
      stream.next(m.xyxy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BBox2DMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::BBox2DMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amrl_msgs::BBox2DMsg_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "xyxy[]" << std::endl;
    for (size_t i = 0; i < v.xyxy.size(); ++i)
    {
      s << indent << "  xyxy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xyxy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_BBOX2DMSG_H
