# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amrl_msgs/VisualizationMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import amrl_msgs.msg
import std_msgs.msg

class VisualizationMsg(genpy.Message):
  _md5sum = "a6032ba0f7715b34782d59d19c0c937b"
  _type = "amrl_msgs/VisualizationMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
# Namespace
string ns

# Provided by particle filter
Pose2Df[] particles

# Provided by navigation
# Assumes that the last one in the list is the best option.
PathVisualization[] path_options

# Generic visualization types.
ColoredPoint2D[] points
ColoredLine2D[] lines
ColoredArc2D[] arcs
ColoredText[] text_annotations
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: amrl_msgs/Pose2Df
float32 x
float32 y
float32 theta
================================================================================
MSG: amrl_msgs/PathVisualization
float32 curvature
float32 distance
float32 clearance
================================================================================
MSG: amrl_msgs/ColoredPoint2D
Point2D point
uint32 color
================================================================================
MSG: amrl_msgs/Point2D
float32 x
float32 y

================================================================================
MSG: amrl_msgs/ColoredLine2D
Point2D p0
Point2D p1
uint32 color

================================================================================
MSG: amrl_msgs/ColoredArc2D
# Circular arc section.
Point2D center
float32 radius
float32 start_angle
float32 end_angle
uint32 color
================================================================================
MSG: amrl_msgs/ColoredText
Point2D start
uint32 color
float32 size_em
string text
"""
  __slots__ = ['header','ns','particles','path_options','points','lines','arcs','text_annotations']
  _slot_types = ['std_msgs/Header','string','amrl_msgs/Pose2Df[]','amrl_msgs/PathVisualization[]','amrl_msgs/ColoredPoint2D[]','amrl_msgs/ColoredLine2D[]','amrl_msgs/ColoredArc2D[]','amrl_msgs/ColoredText[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ns,particles,path_options,points,lines,arcs,text_annotations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisualizationMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ns is None:
        self.ns = ''
      if self.particles is None:
        self.particles = []
      if self.path_options is None:
        self.path_options = []
      if self.points is None:
        self.points = []
      if self.lines is None:
        self.lines = []
      if self.arcs is None:
        self.arcs = []
      if self.text_annotations is None:
        self.text_annotations = []
    else:
      self.header = std_msgs.msg.Header()
      self.ns = ''
      self.particles = []
      self.path_options = []
      self.points = []
      self.lines = []
      self.arcs = []
      self.text_annotations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.particles)
      buff.write(_struct_I.pack(length))
      for val1 in self.particles:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.path_options)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_options:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.curvature, _x.distance, _x.clearance))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.color
        buff.write(_get_struct_I().pack(_x))
      length = len(self.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.lines:
        _v2 = val1.p0
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.p1
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.color
        buff.write(_get_struct_I().pack(_x))
      length = len(self.arcs)
      buff.write(_struct_I.pack(length))
      for val1 in self.arcs:
        _v4 = val1.center
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3fI().pack(_x.radius, _x.start_angle, _x.end_angle, _x.color))
      length = len(self.text_annotations)
      buff.write(_struct_I.pack(length))
      for val1 in self.text_annotations:
        _v5 = val1.start
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_If().pack(_x.color, _x.size_em))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.particles is None:
        self.particles = None
      if self.path_options is None:
        self.path_options = None
      if self.points is None:
        self.points = None
      if self.lines is None:
        self.lines = None
      if self.arcs is None:
        self.arcs = None
      if self.text_annotations is None:
        self.text_annotations = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ns = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.particles = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.particles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_options = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.PathVisualization()
        _x = val1
        start = end
        end += 12
        (_x.curvature, _x.distance, _x.clearance,) = _get_struct_3f().unpack(str[start:end])
        self.path_options.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredPoint2D()
        _v6 = val1.point
        _x = _v6
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.color,) = _get_struct_I().unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lines = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredLine2D()
        _v7 = val1.p0
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.p1
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.color,) = _get_struct_I().unpack(str[start:end])
        self.lines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arcs = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredArc2D()
        _v9 = val1.center
        _x = _v9
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.radius, _x.start_angle, _x.end_angle, _x.color,) = _get_struct_3fI().unpack(str[start:end])
        self.arcs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.text_annotations = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredText()
        _v10 = val1.start
        _x = _v10
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.color, _x.size_em,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.text = str[start:end]
        self.text_annotations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.particles)
      buff.write(_struct_I.pack(length))
      for val1 in self.particles:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.path_options)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_options:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.curvature, _x.distance, _x.clearance))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v11 = val1.point
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.color
        buff.write(_get_struct_I().pack(_x))
      length = len(self.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.lines:
        _v12 = val1.p0
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v13 = val1.p1
        _x = _v13
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.color
        buff.write(_get_struct_I().pack(_x))
      length = len(self.arcs)
      buff.write(_struct_I.pack(length))
      for val1 in self.arcs:
        _v14 = val1.center
        _x = _v14
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3fI().pack(_x.radius, _x.start_angle, _x.end_angle, _x.color))
      length = len(self.text_annotations)
      buff.write(_struct_I.pack(length))
      for val1 in self.text_annotations:
        _v15 = val1.start
        _x = _v15
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_If().pack(_x.color, _x.size_em))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.particles is None:
        self.particles = None
      if self.path_options is None:
        self.path_options = None
      if self.points is None:
        self.points = None
      if self.lines is None:
        self.lines = None
      if self.arcs is None:
        self.arcs = None
      if self.text_annotations is None:
        self.text_annotations = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ns = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.particles = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.particles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_options = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.PathVisualization()
        _x = val1
        start = end
        end += 12
        (_x.curvature, _x.distance, _x.clearance,) = _get_struct_3f().unpack(str[start:end])
        self.path_options.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredPoint2D()
        _v16 = val1.point
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.color,) = _get_struct_I().unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lines = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredLine2D()
        _v17 = val1.p0
        _x = _v17
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v18 = val1.p1
        _x = _v18
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.color,) = _get_struct_I().unpack(str[start:end])
        self.lines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arcs = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredArc2D()
        _v19 = val1.center
        _x = _v19
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.radius, _x.start_angle, _x.end_angle, _x.color,) = _get_struct_3fI().unpack(str[start:end])
        self.arcs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.text_annotations = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.ColoredText()
        _v20 = val1.start
        _x = _v20
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.color, _x.size_em,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.text = str[start:end]
        self.text_annotations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3fI = None
def _get_struct_3fI():
    global _struct_3fI
    if _struct_3fI is None:
        _struct_3fI = struct.Struct("<3fI")
    return _struct_3fI
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
